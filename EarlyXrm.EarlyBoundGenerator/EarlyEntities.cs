//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: Microsoft.Xrm.Sdk.Client.ProxyTypesAssemblyAttribute()]

namespace EarlyXrm
{
	using System;
	using System.Linq;
	using Microsoft.Xrm.Sdk;
	using System.Runtime.Serialization;
	using Microsoft.Xrm.Sdk.Client;
	using System.Collections.Generic;
	using System.ComponentModel;
    using System.Diagnostics.CodeAnalysis;

    [ExcludeFromCodeCoverage]
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("solution")]
	public partial class Solution : EarlyEntity
	{
		
		public Solution() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "solution";
		
		public const string EntityLogicalCollectionName = "solutions";
		
		public const string EntitySetName = "solutions";
		
		[AttributeLogicalNameAttribute("configurationpageid")]
		public EntityReference ConfigurationPageId
		{
			get
			{
				return GetAttributeValue<EntityReference>("configurationpageid");
			}
			set
			{
				SetAttributeValue("configurationpageid", nameof(ConfigurationPageId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				SetAttributeValue("createdby", nameof(CreatedBy), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
			set
			{
				SetAttributeValue("createdon", nameof(CreatedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdonbehalfby")]
		public EntityReference CreatedOnBehalfBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdonbehalfby");
			}
			set
			{
				SetAttributeValue("createdonbehalfby", nameof(CreatedOnBehalfBy), value);
			}
		}
		
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return GetAttributeValue<System.String>("description");
			}
			set
			{
				SetAttributeValue("description", nameof(Description), value);
			}
		}
		
		[AttributeLogicalNameAttribute("friendlyname")]
		public string FriendlyName
		{
			get
			{
				return GetAttributeValue<System.String>("friendlyname");
			}
			set
			{
				SetAttributeValue("friendlyname", nameof(FriendlyName), value);
			}
		}
		
		[AttributeLogicalNameAttribute("installedon")]
		public DateTime? InstalledOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("installedon");
			}
			set
			{
				SetAttributeValue("installedon", nameof(InstalledOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("isapimanaged")]
		public bool? IsApiManaged
		{
			get
			{
				return GetAttributeValue<bool?>("isapimanaged");
			}
			set
			{
				SetAttributeValue("isapimanaged", nameof(IsApiManaged), value);
			}
		}
		
		[AttributeLogicalNameAttribute("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				return GetAttributeValue<bool?>("ismanaged");
			}
			set
			{
				SetAttributeValue("ismanaged", nameof(IsManaged), value);
			}
		}
		
		[AttributeLogicalNameAttribute("isvisible")]
		public bool? IsVisible
		{
			get
			{
				return GetAttributeValue<bool?>("isvisible");
			}
			set
			{
				SetAttributeValue("isvisible", nameof(IsVisible), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				SetAttributeValue("modifiedby", nameof(ModifiedBy), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
			set
			{
				SetAttributeValue("modifiedon", nameof(ModifiedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedonbehalfby")]
		public EntityReference ModifiedOnBehalfBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedonbehalfby");
			}
			set
			{
				SetAttributeValue("modifiedonbehalfby", nameof(ModifiedOnBehalfBy), value);
			}
		}
		
		[AttributeLogicalNameAttribute("organizationid")]
		public EntityReference OrganizationId
		{
			get
			{
				return GetAttributeValue<EntityReference>("organizationid");
			}
			set
			{
				SetAttributeValue("organizationid", nameof(OrganizationId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("parentsolutionid")]
		public EntityReference ParentSolutionId
		{
			get
			{
				return GetAttributeValue<EntityReference>("parentsolutionid");
			}
			set
			{
				SetAttributeValue("parentsolutionid", nameof(ParentSolutionId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("pinpointassetid")]
		public string PinpointAssetId
		{
			get
			{
				return GetAttributeValue<System.String>("pinpointassetid");
			}
			set
			{
				SetAttributeValue("pinpointassetid", nameof(PinpointAssetId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("pinpointpublisherid")]
		public long? PinpointPublisherId
		{
			get
			{
				return GetAttributeValue<long?>("pinpointpublisherid");
			}
			set
			{
				SetAttributeValue("pinpointpublisherid", nameof(PinpointPublisherId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("pinpointsolutiondefaultlocale")]
		public string PinpointSolutionDefaultLocale
		{
			get
			{
				return GetAttributeValue<System.String>("pinpointsolutiondefaultlocale");
			}
			set
			{
				SetAttributeValue("pinpointsolutiondefaultlocale", nameof(PinpointSolutionDefaultLocale), value);
			}
		}
		
		[AttributeLogicalNameAttribute("pinpointsolutionid")]
		public long? PinpointSolutionId
		{
			get
			{
				return GetAttributeValue<long?>("pinpointsolutionid");
			}
			set
			{
				SetAttributeValue("pinpointsolutionid", nameof(PinpointSolutionId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("publisherid")]
		public EntityReference PublisherId
		{
			get
			{
				return GetAttributeValue<EntityReference>("publisherid");
			}
			set
			{
				SetAttributeValue("publisherid", nameof(PublisherId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("solutionid");
			}
			set
			{
				SetAttributeValue("solutionid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("solutionpackageversion")]
		public string SolutionPackageVersion
		{
			get
			{
				return GetAttributeValue<System.String>("solutionpackageversion");
			}
			set
			{
				SetAttributeValue("solutionpackageversion", nameof(SolutionPackageVersion), value);
			}
		}
		
		[AttributeLogicalNameAttribute("solutiontype")]
		public solution_solutiontype? SolutionType
		{
			get
			{
				return (solution_solutiontype?)GetAttributeValue<OptionSetValue>("solutiontype")?.Value;
			}
			set
			{
				SetAttributeValue("solutiontype", nameof(SolutionType), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("templatesuffix")]
		public string TemplateSuffix
		{
			get
			{
				return GetAttributeValue<System.String>("templatesuffix");
			}
			set
			{
				SetAttributeValue("templatesuffix", nameof(TemplateSuffix), value);
			}
		}
		
		[AttributeLogicalNameAttribute("thumbprint")]
		public string Thumbprint
		{
			get
			{
				return GetAttributeValue<System.String>("thumbprint");
			}
			set
			{
				SetAttributeValue("thumbprint", nameof(Thumbprint), value);
			}
		}
		
		[AttributeLogicalNameAttribute("uniquename")]
		public string UniqueName
		{
			get
			{
				return GetAttributeValue<System.String>("uniquename");
			}
			set
			{
				SetAttributeValue("uniquename", nameof(UniqueName), value);
			}
		}
		
		[AttributeLogicalNameAttribute("updatedon")]
		public DateTime? UpdatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("updatedon");
			}
			set
			{
				SetAttributeValue("updatedon", nameof(UpdatedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("upgradeinfo")]
		public string UpgradeInfo
		{
			get
			{
				return GetAttributeValue<System.String>("upgradeinfo");
			}
			set
			{
				SetAttributeValue("upgradeinfo", nameof(UpgradeInfo), value);
			}
		}
		
		[AttributeLogicalNameAttribute("version")]
		public string Version
		{
			get
			{
				return GetAttributeValue<System.String>("version");
			}
			set
			{
				SetAttributeValue("version", nameof(Version), value);
			}
		}
		
		[AttributeLogicalNameAttribute("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				return GetAttributeValue<long?>("versionnumber");
			}
			set
			{
				SetAttributeValue("versionnumber", nameof(VersionNumber), value);
			}
		}
		
		[RelationshipSchemaNameAttribute("solution_parent_solution", EntityRole.Referenced)]
		public IEnumerable<Solution> Referencedsolution_parent_solution
		{
			get
			{
				return GetRelatedEntities<Solution>("solution_parent_solution", EntityRole.Referenced);
			}
			set
			{
				SetRelatedEntities<Solution>("solution_parent_solution", nameof(Referencedsolution_parent_solution), value, EntityRole.Referenced);
			}
		}
		
		[RelationshipSchemaNameAttribute("solution_solutioncomponent")]
		public IEnumerable<SolutionComponent> solution_solutioncomponent
		{
			get
			{
				return GetRelatedEntities<SolutionComponent>("solution_solutioncomponent");
			}
			set
			{
				SetRelatedEntities<SolutionComponent>("solution_solutioncomponent", nameof(solution_solutioncomponent), value);
			}
		}
		
		[AttributeLogicalNameAttribute("parentsolutionid")]
		[RelationshipSchemaNameAttribute("solution_parent_solution", EntityRole.Referencing)]
		public Solution Referencingsolution_parent_solution
		{
			get
			{
				return GetRelatedEntity<Solution>("solution_parent_solution", EntityRole.Referencing);
			}
		}
		
		[DataContract()]
		public class LogicalNames
		{
			
			public static string ConfigurationPageId = "configurationpageid";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string CreatedOnBehalfBy = "createdonbehalfby";
			
			public static string Description = "description";
			
			public static string FriendlyName = "friendlyname";
			
			public static string InstalledOn = "installedon";
			
			public static string IsApiManaged = "isapimanaged";
			
			public static string IsManaged = "ismanaged";
			
			public static string IsVisible = "isvisible";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string ModifiedOnBehalfBy = "modifiedonbehalfby";
			
			public static string OrganizationId = "organizationid";
			
			public static string ParentSolutionId = "parentsolutionid";
			
			public static string PinpointAssetId = "pinpointassetid";
			
			public static string PinpointPublisherId = "pinpointpublisherid";
			
			public static string PinpointSolutionDefaultLocale = "pinpointsolutiondefaultlocale";
			
			public static string PinpointSolutionId = "pinpointsolutionid";
			
			public static string PublisherId = "publisherid";
			
			public static string Id = "solutionid";
			
			public static string SolutionPackageVersion = "solutionpackageversion";
			
			public static string SolutionType = "solutiontype";
			
			public static string TemplateSuffix = "templatesuffix";
			
			public static string Thumbprint = "thumbprint";
			
			public static string UniqueName = "uniquename";
			
			public static string UpdatedOn = "updatedon";
			
			public static string UpgradeInfo = "upgradeinfo";
			
			public static string Version = "version";
			
			public static string VersionNumber = "versionnumber";
			
			public static string Referencingsolution_parent_solution = "parentsolutionid";
		}
		
		[DataContract()]
		public class Relationships
		{
			
			public static string Referencedsolution_parent_solution = "solution_parent_solution";
			
			public static string solution_solutioncomponent = "solution_solutioncomponent";
			
			public static string Referencingsolution_parent_solution = "solution_parent_solution";
		}
	}

	[ExcludeFromCodeCoverage]
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("solutioncomponent")]
	public partial class SolutionComponent : EarlyEntity
	{
		
		public SolutionComponent() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "solutioncomponent";
		
		public const string EntityLogicalCollectionName = "solutioncomponentss";
		
		public const string EntitySetName = "solutioncomponents";
		
		[AttributeLogicalNameAttribute("componenttype")]
		public componenttype? ComponentType
		{
			get
			{
				return (componenttype?)GetAttributeValue<OptionSetValue>("componenttype")?.Value;
			}
			set
			{
				SetAttributeValue("componenttype", nameof(ComponentType), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				SetAttributeValue("createdby", nameof(CreatedBy), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
			set
			{
				SetAttributeValue("createdon", nameof(CreatedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdonbehalfby")]
		public EntityReference CreatedOnBehalfBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdonbehalfby");
			}
			set
			{
				SetAttributeValue("createdonbehalfby", nameof(CreatedOnBehalfBy), value);
			}
		}
		
		[AttributeLogicalNameAttribute("ismetadata")]
		public bool? IsMetadata
		{
			get
			{
				return GetAttributeValue<bool?>("ismetadata");
			}
			set
			{
				SetAttributeValue("ismetadata", nameof(IsMetadata), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				SetAttributeValue("modifiedby", nameof(ModifiedBy), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
			set
			{
				SetAttributeValue("modifiedon", nameof(ModifiedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedonbehalfby")]
		public EntityReference ModifiedOnBehalfBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedonbehalfby");
			}
			set
			{
				SetAttributeValue("modifiedonbehalfby", nameof(ModifiedOnBehalfBy), value);
			}
		}
		
		[AttributeLogicalNameAttribute("objectid")]
		public Guid? ObjectId
		{
			get
			{
				return GetAttributeValue<Guid?>("objectid");
			}
			set
			{
				SetAttributeValue("objectid", nameof(ObjectId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("rootcomponentbehavior")]
		public solutioncomponent_rootcomponentbehavior? RootComponentBehavior
		{
			get
			{
				return (solutioncomponent_rootcomponentbehavior?)GetAttributeValue<OptionSetValue>("rootcomponentbehavior")?.Value;
			}
			set
			{
				SetAttributeValue("rootcomponentbehavior", nameof(RootComponentBehavior), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("rootsolutioncomponentid")]
		public Guid? RootSolutionComponentId
		{
			get
			{
				return GetAttributeValue<Guid?>("rootsolutioncomponentid");
			}
			set
			{
				SetAttributeValue("rootsolutioncomponentid", nameof(RootSolutionComponentId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("solutioncomponentid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("solutioncomponentid");
			}
			set
			{
				SetAttributeValue("solutioncomponentid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public EntityReference SolutionId
		{
			get
			{
				return GetAttributeValue<EntityReference>("solutionid");
			}
			set
			{
				SetAttributeValue("solutionid", nameof(SolutionId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				return GetAttributeValue<long?>("versionnumber");
			}
			set
			{
				SetAttributeValue("versionnumber", nameof(VersionNumber), value);
			}
		}
		
		[RelationshipSchemaNameAttribute("solutioncomponent_parent_solutioncomponent", EntityRole.Referenced)]
		public IEnumerable<SolutionComponent> Referencedsolutioncomponent_parent_solutioncomponent
		{
			get
			{
				return GetRelatedEntities<SolutionComponent>("solutioncomponent_parent_solutioncomponent", EntityRole.Referenced);
			}
			set
			{
				SetRelatedEntities<SolutionComponent>("solutioncomponent_parent_solutioncomponent", nameof(Referencedsolutioncomponent_parent_solutioncomponent), value, EntityRole.Referenced);
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		[RelationshipSchemaNameAttribute("solution_solutioncomponent")]
		public Solution solution_solutioncomponent
		{
			get
			{
				return GetRelatedEntity<Solution>("solution_solutioncomponent");
			}
		}
		
		[AttributeLogicalNameAttribute("rootsolutioncomponentid")]
		[RelationshipSchemaNameAttribute("solutioncomponent_parent_solutioncomponent", EntityRole.Referencing)]
		public SolutionComponent Referencingsolutioncomponent_parent_solutioncomponent
		{
			get
			{
				return GetRelatedEntity<SolutionComponent>("solutioncomponent_parent_solutioncomponent", EntityRole.Referencing);
			}
		}
		
		[DataContract()]
		public class LogicalNames
		{
			
			public static string ComponentType = "componenttype";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string CreatedOnBehalfBy = "createdonbehalfby";
			
			public static string IsMetadata = "ismetadata";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string ModifiedOnBehalfBy = "modifiedonbehalfby";
			
			public static string ObjectId = "objectid";
			
			public static string RootComponentBehavior = "rootcomponentbehavior";
			
			public static string RootSolutionComponentId = "rootsolutioncomponentid";
			
			public static string Id = "solutioncomponentid";
			
			public static string SolutionId = "solutionid";
			
			public static string VersionNumber = "versionnumber";
			
			public static string solution_solutioncomponent = "solutionid";
			
			public static string Referencingsolutioncomponent_parent_solutioncomponent = "rootsolutioncomponentid";
		}
		
		[DataContract()]
		public class Relationships
		{
			
			public static string Referencedsolutioncomponent_parent_solutioncomponent = "solutioncomponent_parent_solutioncomponent";
			
			public static string solution_solutioncomponent = "solution_solutioncomponent";
			
			public static string Referencingsolutioncomponent_parent_solutioncomponent = "solutioncomponent_parent_solutioncomponent";
		}
	}

	[ExcludeFromCodeCoverage]
	[DataContract()]
	public class EarlyEntity : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		public EarlyEntity(string entityLogicalName) : base(entityLogicalName) { }
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected void OnPropertyChanged(string propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
		
		protected void OnPropertyChanging(string propertyName)
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
		
		public IEnumerable<T> GetAttributeValues<T>(string attributeLogicalName) where T : Entity
	    {
		    return base.GetAttributeValue<EntityCollection>(attributeLogicalName)?.Entities?.Cast<T>();
	    }
		
		protected void SetAttributeValues<T>(string logicalName, string attributePropertyName, IEnumerable<T> value)  where T : Entity
        {
            SetAttributeValue(logicalName, attributePropertyName, new EntityCollection(new List<Entity>(value)));
        }
		
		protected void SetAttributeValue(string logicalName, string attributePropertyName, object value)
        {
            OnPropertyChanging(attributePropertyName);
            base.SetAttributeValue(logicalName, value);
            OnPropertyChanged(attributePropertyName);
        }
		
		protected new T GetRelatedEntity<T>(string relationshipSchemaName, EntityRole? primaryEntityRole = null) where T : Entity
        {
            return base.GetRelatedEntity<T>(relationshipSchemaName, primaryEntityRole);
        }
		
		protected void SetRelatedEntity<T>(string relationshipSchemaName, string attributePropertyName, T entity, EntityRole? primaryEntityRole = null) where T : Entity
        {
            OnPropertyChanging(attributePropertyName);
            base.SetRelatedEntity(relationshipSchemaName, primaryEntityRole, entity);
            OnPropertyChanged(attributePropertyName);
        }
		
		protected new IEnumerable<T> GetRelatedEntities<T>(string relationshipSchemaName, EntityRole? primaryEntityRole = null) where T : Entity
        {
            return base.GetRelatedEntities<T>(relationshipSchemaName, primaryEntityRole);
        }
		
		protected void SetRelatedEntities<T>(string relationshipSchemaName, string attributePropertyName, IEnumerable<T> entities, EntityRole? primaryEntityRole = null) where T : Entity
        {
            OnPropertyChanging(attributePropertyName);
            base.SetRelatedEntities(relationshipSchemaName, primaryEntityRole, entities);
            OnPropertyChanged(attributePropertyName);
        }
	}
}
